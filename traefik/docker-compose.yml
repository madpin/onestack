services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      # Provider
      - '--providers.docker'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.watch=true'
      - '--providers.docker.network=${WEB_NETWORK_NAME}'
      # Entrypoints
      - '--entrypoints.web.address=:80'
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'
      - '--entrypoints.web.http.redirections.entrypoint.scheme=https'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.websecure.http.tls.certresolver=myresolver'
      # Let's Encrypt
      - '--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}'
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # For testing
      - '--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web'
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      
      # HTTP/3
      - '--entrypoints.websecure.http3'
      # Logs
      # - '--accesslog.filepath=/logs/access.log'
      # - '--accesslog.format=json'
      # - '--log.filepath=/logs/traefik.log'
      # - '--log.format=json'
      - '--log.level=${TRAEFIK_LOG_LEVEL:-DEBUG}'
      # Metrics
      # - '--metrics.prometheus.addrouterslabels'
      # Misc
      - '--api.dashboard' # Enable Traefik dashboard
      # Middlewares & Plugins (examples, uncomment to use)
      # - '--entrypoints.websecure.http.middlewares=compress@file,headers@file${TRAEFIK_PLUGINS:-}'
      # - '--experimental.plugins.fail2ban.modulename=github.com/tommoulard/fail2ban'
      # - '--experimental.plugins.fail2ban.version=v0.6.0'
      # - '--global.checknewversion=false' # Disable update checks
      - '--global.sendanonymoususage=false' # Disable anonymous usage stats
      - '--ping' # Enable ping endpoint for health checks
      # File provider (example, uncomment to use)
      # - '--providers.file.directory=/dynamic_conf/'
      # - '--providers.file.watch=true'
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./config:/dynamic_conf:ro # For dynamic configuration files
      - ./data:/letsencrypt # Persists Let's Encrypt certificates
      - /var/run/docker.sock:/var/run/docker.sock:ro # Docker socket access
    networks:
      - web
    healthcheck:
      test: ['CMD', 'traefik', 'healthcheck', '--ping']
    labels:
      # --- Dashboard Configuration ---
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${BASE_DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_AUTH}"
      - "traefik.http.middlewares.csp-override.headers.contentSecurityPolicy=default-src 'self' https: wss:; script-src 'self' 'unsafe-eval' 'unsafe-inline' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' https: blob: data:; font-src 'self' https:; frame-src 'self' https:; frame-ancestors 'self' https://madpin.dev; object-src 'none';"

  whoami: # A simple service to test Traefik routing and SSL
    image: traefik/whoami
    container_name: whoami
    restart: unless-stopped
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.${BASE_DOMAIN}`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"

networks:
  web:
    external: true
    name: ${WEB_NETWORK_NAME} # Using variable from root .env file
