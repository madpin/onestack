# shared/postgres/.env.template
# This file documents variables relevant to the PostgreSQL service.
# Core credentials (POSTGRES_USER, POSTGRES_PASSWORD) and data ownership (UID, GID)
# are typically set in the project's root .env file and used by
# shared/postgres/docker-compose.yml.
#
# This service's docker-compose.yml does not currently load a service-specific .env file.
# To use variables from a shared/postgres/.env file, you would need to add
# `env_file: .env` to its docker-compose.yml service definition.

# --- Informational: Variables from root .env used by docker-compose.yml ---
# These are typically set in the project's root .env file:
#
# POSTGRES_USER=your_postgres_superuser # Superuser for the PostgreSQL instance
# POSTGRES_PASSWORD=your_strong_postgres_password_here
# POSTGRES_PORT=5432 # Host exposure port for PostgreSQL
#
# UID=1000 # User ID for ownership of the ./data volume on the host
# GID=1000 # Group ID for ownership of the ./data volume on the host

# --- Optional: Standard PostgreSQL Docker Image Variables ---
# If you were to use a service-specific .env file (by modifying docker-compose.yml),
# you could set these standard PostgreSQL variables.

# Default database to create on initialization.
# If set, a database with this name will be created and owned by POSTGRES_USER.
# Note: This project primarily uses init scripts in shared/postgres/config/initdb/
# for more complex database and role setup.
# POSTGRES_DB=app_default_db

# Path for PostgreSQL data directory inside the container. Usually not changed.
# PGDATA=/var/lib/postgresql/data/pgdata

# --- Database and Role Creation ---
# Custom databases, roles, and extensions (like pgvector) are typically set up
# using SQL or shell scripts in the `shared/postgres/config/initdb/` directory.
# These scripts run automatically when the PostgreSQL container initializes for the first time.
# Example: To create a database 'mydb' and enable pgvector:
#   -- In a file like shared/postgres/config/initdb/01-createdb.sql
#   CREATE DATABASE mydb;
#   -- Then, connect to mydb (e.g., in another script or manually as superuser) and run:
#   -- CREATE EXTENSION IF NOT EXISTS vector;

# For a full list of PostgreSQL Docker image environment variables, see:
# https://hub.docker.com/_/postgres
